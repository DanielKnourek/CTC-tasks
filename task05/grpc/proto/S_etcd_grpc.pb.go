// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: S_etcd.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SEtcdClient is the client API for SEtcd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SEtcdClient interface {
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
	ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductListResponse, error)
	GetProduct(ctx context.Context, in *ProductGetRequest, opts ...grpc.CallOption) (*ProductGetResponse, error)
	CreateProduct(ctx context.Context, in *ProductPostRequest, opts ...grpc.CallOption) (*ProductPostResponse, error)
	DeleteProduct(ctx context.Context, in *ProductDeleteRequest, opts ...grpc.CallOption) (*ProductDeleteResponse, error)
}

type sEtcdClient struct {
	cc grpc.ClientConnInterface
}

func NewSEtcdClient(cc grpc.ClientConnInterface) SEtcdClient {
	return &sEtcdClient{cc}
}

func (c *sEtcdClient) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/proto.S_etcd/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEtcdClient) ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductListResponse, error) {
	out := new(ProductListResponse)
	err := c.cc.Invoke(ctx, "/proto.S_etcd/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEtcdClient) GetProduct(ctx context.Context, in *ProductGetRequest, opts ...grpc.CallOption) (*ProductGetResponse, error) {
	out := new(ProductGetResponse)
	err := c.cc.Invoke(ctx, "/proto.S_etcd/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEtcdClient) CreateProduct(ctx context.Context, in *ProductPostRequest, opts ...grpc.CallOption) (*ProductPostResponse, error) {
	out := new(ProductPostResponse)
	err := c.cc.Invoke(ctx, "/proto.S_etcd/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sEtcdClient) DeleteProduct(ctx context.Context, in *ProductDeleteRequest, opts ...grpc.CallOption) (*ProductDeleteResponse, error) {
	out := new(ProductDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.S_etcd/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SEtcdServer is the server API for SEtcd service.
// All implementations must embed UnimplementedSEtcdServer
// for forward compatibility
type SEtcdServer interface {
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	ListProducts(context.Context, *Empty) (*ProductListResponse, error)
	GetProduct(context.Context, *ProductGetRequest) (*ProductGetResponse, error)
	CreateProduct(context.Context, *ProductPostRequest) (*ProductPostResponse, error)
	DeleteProduct(context.Context, *ProductDeleteRequest) (*ProductDeleteResponse, error)
	mustEmbedUnimplementedSEtcdServer()
}

// UnimplementedSEtcdServer must be embedded to have forward compatible implementations.
type UnimplementedSEtcdServer struct {
}

func (UnimplementedSEtcdServer) HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedSEtcdServer) ListProducts(context.Context, *Empty) (*ProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedSEtcdServer) GetProduct(context.Context, *ProductGetRequest) (*ProductGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedSEtcdServer) CreateProduct(context.Context, *ProductPostRequest) (*ProductPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedSEtcdServer) DeleteProduct(context.Context, *ProductDeleteRequest) (*ProductDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedSEtcdServer) mustEmbedUnimplementedSEtcdServer() {}

// UnsafeSEtcdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SEtcdServer will
// result in compilation errors.
type UnsafeSEtcdServer interface {
	mustEmbedUnimplementedSEtcdServer()
}

func RegisterSEtcdServer(s grpc.ServiceRegistrar, srv SEtcdServer) {
	s.RegisterService(&SEtcd_ServiceDesc, srv)
}

func _SEtcd_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEtcdServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.S_etcd/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEtcdServer).HelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEtcd_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEtcdServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.S_etcd/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEtcdServer).ListProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEtcd_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEtcdServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.S_etcd/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEtcdServer).GetProduct(ctx, req.(*ProductGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEtcd_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEtcdServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.S_etcd/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEtcdServer).CreateProduct(ctx, req.(*ProductPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SEtcd_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SEtcdServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.S_etcd/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SEtcdServer).DeleteProduct(ctx, req.(*ProductDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SEtcd_ServiceDesc is the grpc.ServiceDesc for SEtcd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SEtcd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.S_etcd",
	HandlerType: (*SEtcdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _SEtcd_HelloWorld_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _SEtcd_ListProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _SEtcd_GetProduct_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _SEtcd_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _SEtcd_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "S_etcd.proto",
}
